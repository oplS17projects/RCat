#lang racket
(require racket/system)
(require racket/tcp)

(define (RCat targets ports protocols)
  (if (regexp-match? #rx".*-.*" targets)
      (ips->machines targets ports protocols)
      (machine targets ports protocols)))

(define (ips->machines targets ports protocols)
  (define target-machines '())
  (define (add-machine-alive ip)
    (set! target-machines (cons ip target-machines)))
  (define (check-tports port) "stub")
  (define (check-uports port) "stub")
;> (define ping-input '())
;> (define x (car (process (string-append "ping -c 3 " addr))))
;> (if (eof-object? (read-line x)) "hit EOF" (set! ping-input (cons (read-line x) ping-input )))
;> ping-input
;'("64 bytes from 192.168.1.1: icmp_seq=0 ttl=64 time=13.079 ms")
  (define (probe-ping addr)
    (thread (lambda ()
              (let ((ping-input '()))
                (if (regexp-match? #rx".*64.*" (read-string 4096 (car (process (string-append "ping -c 3 " addr)))))
                    (add-machine-alive addr)
                    "No connection detected")))))
  (define (dispatch message)
    (cond((eq? (car message) 'up) target-machines)
         ((eq? (car message) 'machines) "test")
         ((eq? (car message) 'tport) (check-tports (cdr message)) )
         ((eq? (car message) 'uport) (check-uports (cdr message)) )
         (else error "Bad moves, dude")))  
    (begin (map
            (lambda (target-ip) (probe-ping target-ip) ) (range->list targets) )) dispatch)
  

; convert from range of ips to a list of ips
; (range->list "192.168.1-15") -> '("192.168.1.1" ... "192.168.1.15")
(define (range->list targets)
  (let*((range(regexp-split #rx"-" targets))
        (octets (regexp-split #rx"\\." (car range)))
        (three-octets (string-append (car octets) "." (cadr octets) "." (caddr octets) "."))
        (start (cadddr octets))
        (end (cadr range))
        (individual-machines-int (enum-range-i (string->number start) (string->number end)) )
        (individual-machines-string (map number->string individual-machines-int))
        (subnet (map (lambda (x) (string-append three-octets x)) individual-machines-string) ))
    subnet
    
    ))

; from ps3c
(define (enum-range-i a b)
  (define (enum-range-halper a b total)
    (if (> a b)
        total
        (enum-range-halper (add1 a) b (append total (list a) ))))
  (enum-range-halper a b '()))



(define (machine ip ports protocols)
  (define open-tcp '())
  (define open-udp '())
  (define (add-upd port)
    (set! open-udp (cons port open-udp)))
  (define (add-tcp port)
    (set! open-tcp (cons port open-tcp)))
  (define (check-uport port)
    "stub")
  (define (check-tport port)
    "stub")
  (define (probe-tcp ip port)
    (thread (lambda () (if (with-handlers ([exn:fail? (lambda (exn) exn )])
    (let-values (((input output) (tcp-connect "8.8.8.8" port)))
                (list input output))) (add-tcp port) "NO"))))
  (define (dispatch message)
    (cond((eq? (car message) 'tports) open-tcp)
         ((eq? (car message) 'uports) open-udp)
         ((eq? (car message) 'tport) (check-tport (cdr message)) )
         ((eq? (car message) 'uport) (check-uport (cdr message)) )
         (else error "Bad moves, dude")))
  (begin (map (lambda (x) (probe-tcp ip x)) (enum-ports ports)) dispatch))

(define (enum-ports ports)
  (let*((range(regexp-split #rx"-" ports))
        (start (car range))
        (end (cadr range))
        (port-range-numbers(enum-range-i (string->number start) (string->number end)))
        (port-range-strings (map number->string port-range-numbers)))
    port-range-numbers))
